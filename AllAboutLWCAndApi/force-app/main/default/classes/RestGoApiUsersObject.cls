//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.
public class RestGoApiUsersObject{
	public class RateLimit{
		@AuraEnabled
		public Integer limit_Z{
			get;

			set;
		}

		 // in json: limit
		@AuraEnabled
		public Integer remaining{
			get;

			set;
		}

		@AuraEnabled
		public Integer reset{
			get;

			set;
		}

		public RateLimit(JSONParser parser){
			while (parser.nextToken() != System.JSONToken.END_OBJECT){
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME){
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL){
						if (text == 'limit'){
							limit_Z = parser.getIntegerValue();
						} else if (text == 'remaining'){
							remaining = parser.getIntegerValue();
						} else if (text == 'reset'){
							reset = parser.getIntegerValue();
						} else{
							System.debug(LoggingLevel.WARN, 'RateLimit consuming unrecognized property: ' + text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Meta{
		@AuraEnabled
		public Boolean success{
			get;

			set;
		}

		@AuraEnabled
		public Integer code{
			get;

			set;
		}

		@AuraEnabled
		public String message{
			get;

			set;
		}

		@AuraEnabled
		public Integer totalCount{
			get;

			set;
		}

		@AuraEnabled
		public Integer pageCount{
			get;

			set;
		}

		@AuraEnabled
		public Integer currentPage{
			get;

			set;
		}

		@AuraEnabled
		public Integer perPage{
			get;

			set;
		}

		@AuraEnabled
		public RateLimit rateLimit{
			get;

			set;
		}

		public Meta(JSONParser parser){
			while (parser.nextToken() != System.JSONToken.END_OBJECT){
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME){
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL){
						if (text == 'success'){
							success = parser.getBooleanValue();
						} else if (text == 'code'){
							code = parser.getIntegerValue();
						} else if (text == 'message'){
							message = parser.getText();
						} else if (text == 'totalCount'){
							totalCount = parser.getIntegerValue();
						} else if (text == 'pageCount'){
							pageCount = parser.getIntegerValue();
						} else if (text == 'currentPage'){
							currentPage = parser.getIntegerValue();
						} else if (text == 'perPage'){
							perPage = parser.getIntegerValue();
						} else if (text == 'rateLimit'){
							rateLimit = new RateLimit(parser);
						} else{
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: ' + text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public Meta x_meta{
		get;

		set;
	}

	 // in json: _meta
	public List<Result> result{
		get;

		set;
	}

	public RestGoApiUsersObject(JSONParser parser){
		while (parser.nextToken() != System.JSONToken.END_OBJECT){
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME){
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL){
					if (text == '_meta'){
						x_meta = new Meta(parser);
					} else if (text == 'result'){
						result = arrayOfResult(parser);
					} else{
						System.debug(LoggingLevel.WARN, 'RestGoApiUsersObject consuming unrecognized property: ' + text);
						consumeObject(parser);
					}
				}
			}
		}
	}

	public class Links{
		@AuraEnabled
		public Self self{
			get;

			set;
		}

		@AuraEnabled
		public Self edit{
			get;

			set;
		}

		@AuraEnabled
		public Self avatar{
			get;

			set;
		}

		public Links(JSONParser parser){
			while (parser.nextToken() != System.JSONToken.END_OBJECT){
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME){
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL){
						if (text == 'self'){
							self = new Self(parser);
						} else if (text == 'edit'){
							edit = new Self(parser);
						} else if (text == 'avatar'){
							avatar = new Self(parser);
						} else{
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: ' + text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Self{
		public String href{
			get;

			set;
		}

		public Self(JSONParser parser){
			while (parser.nextToken() != System.JSONToken.END_OBJECT){
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME){
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL){
						if (text == 'href'){
							href = parser.getText();
						} else{
							System.debug(LoggingLevel.WARN, 'Self consuming unrecognized property: ' + text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Result{
		@AuraEnabled
		public String id{
			get;

			set;
		}

		@AuraEnabled
		public String first_name{
			get;

			set;
		}

		@AuraEnabled
		public String last_name{
			get;

			set;
		}

		@AuraEnabled
		public String gender{
			get;

			set;
		}

		@AuraEnabled
		public String dob{
			get;

			set;
		}

		@AuraEnabled
		public String email{
			get;

			set;
		}

		@AuraEnabled
		public String phone{
			get;

			set;
		}

		@AuraEnabled
		public String website{
			get;

			set;
		}

		@AuraEnabled
		public String address{
			get;

			set;
		}

		@AuraEnabled
		public String status{
			get;

			set;
		}

		@AuraEnabled
		public Links x_links{
			get;

			set;
		}

		 // in json: _links
		public Result(JSONParser parser){
			while (parser.nextToken() != System.JSONToken.END_OBJECT){
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME){
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL){
						if (text == 'id'){
							id = parser.getText();
						} else if (text == 'first_name'){
							first_name = parser.getText();
						} else if (text == 'last_name'){
							last_name = parser.getText();
						} else if (text == 'gender'){
							gender = parser.getText();
						} else if (text == 'dob'){
							dob = parser.getText();
						} else if (text == 'email'){
							email = parser.getText();
						} else if (text == 'phone'){
							phone = parser.getText();
						} else if (text == 'website'){
							website = parser.getText();
						} else if (text == 'address'){
							address = parser.getText();
						} else if (text == 'status'){
							status = parser.getText();
						} else if (text == '_links'){
							x_links = new Links(parser);
						} else{
							System.debug(LoggingLevel.WARN, 'Result consuming unrecognized property: ' + text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public static RestGoApiUsersObject parse(String json){
		System.JSONParser parser = System.JSON.createParser(json);
		return new RestGoApiUsersObject(parser);
	}

	public static void consumeObject(System.JSONParser parser){
		Integer depth = 0;
		do{
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || curr == System.JSONToken.START_ARRAY){
				depth ++ ;
			} else if (curr == System.JSONToken.END_OBJECT || curr == System.JSONToken.END_ARRAY){
				depth -- ;
			}
		}
		while (depth > 0 && parser.nextToken() != null);
	}

	private static List<Result> arrayOfResult(System.JSONParser p){
		List<Result> res = new List<Result>();
		if (p.getCurrentToken() == null)
			p.nextToken();
		while (p.nextToken() != System.JSONToken.END_ARRAY){
			res.add(new Result(p));
		}
		return res;
	}
}